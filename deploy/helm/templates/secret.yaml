# find secret resource with name datalens-secret
{{- $US_MASTER_TOKEN := .Values.secrets.US_MASTER_TOKEN | default (randAlphaNum 32) }}
{{- $CONTROL_API_CRYPTO_KEY := .Values.secrets.CONTROL_API_CRYPTO_KEY | default (randAlphaNum 32 | b64enc) }}
{{- $POSTGRES_PASSWORD := .Values.secrets.POSTGRES_PASSWORD | default (randAlphaNum 32) }}
{{- $DICT := dict "US_MASTER_TOKEN" ($US_MASTER_TOKEN | b64enc) "CONTROL_API_CRYPTO_KEY" ($CONTROL_API_CRYPTO_KEY | b64enc) "POSTGRES_PASSWORD" ($POSTGRES_PASSWORD | b64enc) }}
{{- $SECRET := (lookup "v1" "Secret" .Release.Namespace "datalens-secret").data | default $DICT }}
{{- $US_MASTER_TOKEN := get $SECRET "US_MASTER_TOKEN" | default ($US_MASTER_TOKEN | b64enc) }}
{{- $CONTROL_API_CRYPTO_KEY := get $SECRET "CONTROL_API_CRYPTO_KEY" | default ($CONTROL_API_CRYPTO_KEY | b64enc) }}
{{- $POSTGRES_PASSWORD := get $SECRET "POSTGRES_PASSWORD" | default ($POSTGRES_PASSWORD | b64enc) }}
apiVersion: v1
kind: Secret
metadata:
  name: datalens-secret
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  US_MASTER_TOKEN: {{ $US_MASTER_TOKEN }}
  # double base64 encoding is not error
  CONTROL_API_CRYPTO_KEY: {{ $CONTROL_API_CRYPTO_KEY }}
  POSTGRES_PASSWORD: {{ $POSTGRES_PASSWORD }}
  POSTGRES_DSN_LIST_US: {{ print "postgres://pg-user:" ($POSTGRES_PASSWORD | b64dec) "@datalens-pg-cip:5432/pg-us-db" | b64enc }}
  POSTGRES_DSN_LIST_COMPENG: {{ print "postgres://pg-user:" ($POSTGRES_PASSWORD | b64dec) "@datalens-pg-cip:5432/pg-compeng-db" | b64enc }}
