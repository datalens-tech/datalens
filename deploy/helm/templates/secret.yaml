# find secret resource with name datalens-secret
{{ $secret := (lookup "v1" "Secret" .Release.Namespace "datalens-secret") }}
{{ $pg_password := (randAlphaNum 32 | b64enc) }}
{{ if and $secret (hasKey $secret.data "POSTGRES_PASSWORD") }}
  {{ $pg_password = $secret.data.POSTGRES_PASSWORD }}
{{ end }}

apiVersion: v1
kind: Secret
metadata:
  name: datalens-secret
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  # US_MASTER_TOKEN
  {{ if and $secret (hasKey $secret.data "US_MASTER_TOKEN") -}}
  US_MASTER_TOKEN: {{ $secret.data.US_MASTER_TOKEN }}
  {{ else -}}
  US_MASTER_TOKEN: {{ randAlphaNum 32 | b64enc }}
  {{ end }}
  # CONTROL_API_CRYPTO_KEY
  {{ if and $secret (hasKey $secret.data "CONTROL_API_CRYPTO_KEY") -}}
  CONTROL_API_CRYPTO_KEY: {{ $secret.data.CONTROL_API_CRYPTO_KEY }}
  {{ else -}}
  # double base64 encoding is not error
  CONTROL_API_CRYPTO_KEY: {{ randAlphaNum 32 | b64enc | b64enc }}
  {{ end }}
  # POSTGRES_PASSWORD
  POSTGRES_PASSWORD: {{ $pg_password }}
  # POSTGRES_DSN_LIST
  POSTGRES_DSN_LIST_US: {{ print "postgres://pg-user:" ($pg_password | b64dec) "@pg-cip:5432/pg-us-db" | b64enc }}
  POSTGRES_DSN_LIST_COMPENG: {{ print "postgres://pg-user:" ($pg_password | b64dec) "@pg-cip:5432/pg-compeng-db" | b64enc }}
