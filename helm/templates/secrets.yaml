{{- $US_MASTER_TOKEN := .Values.secrets.US_MASTER_TOKEN | default (randAlphaNum 32) }}
{{- $AUTH_MASTER_TOKEN := .Values.secrets.AUTH_MASTER_TOKEN | default (randAlphaNum 32) }}
{{- $EXPORT_DATA_VERIFICATION_KEY := .Values.secrets.EXPORT_DATA_VERIFICATION_KEY | default (randAlphaNum 32) }}
{{- $CONTROL_API_CRYPTO_KEY := .Values.secrets.CONTROL_API_CRYPTO_KEY | default (randAlphaNum 32 | b64enc) }}

{{- $CERT := dict "Cert" "" "Key" "" }}
{{ if and .Values.ingress.enabled .Values.ingress.domain (not .Values.ingress.tls.secret.crt) (not .Values.ingress.tls.secret.key) }}
  {{- $CERT = genSelfSignedCert .Values.ingress.domain nil nil 365 | toJson | fromJson }}
{{ end }}

{{- $INGRESS_TLS_CRT := .Values.ingress.tls.secret.crt | default (get $CERT "Cert") }}
{{- $INGRESS_TLS_KEY := .Values.ingress.tls.secret.key | default (get $CERT "Key") }}

{{- $POSTGRES_PASSWORD := .Values.secrets.POSTGRES_PASSWORD | default (randAlphaNum 32)}}

{{- $POSTGRES_TLS_CA := .Values.infra.postgres.tls.secret.ca | default "" }}

{{- $AUTH_TOKEN_PRIVATE_KEY := .Values.secrets.AUTH_TOKEN_PRIVATE_KEY | default ""}}
{{- $AUTH_TOKEN_PUBLIC_KEY := .Values.secrets.AUTH_TOKEN_PUBLIC_KEY | default ""}}
{{- $AUTH_ADMIN_PASSWORD := .Values.secrets.AUTH_ADMIN_PASSWORD | default (randAlphaNum 32)}}

{{- $TEMPORAL_AUTH_PRIVATE_KEY := .Values.secrets.TEMPORAL_AUTH_PRIVATE_KEY | default ""}}
{{- $TEMPORAL_AUTH_PUBLIC_KEY := .Values.secrets.TEMPORAL_AUTH_PUBLIC_KEY | default ""}}

{{- $DICT := dict "__" "__" }}
{{- $SECRET := (lookup "v1" "Secret" .Release.Namespace "datalens-secrets").data | default $DICT }}

{{- $US_MASTER_TOKEN := get $SECRET "US_MASTER_TOKEN" | default ($US_MASTER_TOKEN | b64enc) }}
{{- $AUTH_MASTER_TOKEN := get $SECRET "AUTH_MASTER_TOKEN" | default ($AUTH_MASTER_TOKEN | b64enc) }}
{{- $EXPORT_DATA_VERIFICATION_KEY := get $SECRET "EXPORT_DATA_VERIFICATION_KEY" | default ($EXPORT_DATA_VERIFICATION_KEY | b64enc) }}
{{- $CONTROL_API_CRYPTO_KEY := get $SECRET "CONTROL_API_CRYPTO_KEY" | default ($CONTROL_API_CRYPTO_KEY | b64enc) }}
{{- $AUTH_ADMIN_PASSWORD := get $SECRET "AUTH_ADMIN_PASSWORD" | default ($AUTH_ADMIN_PASSWORD | b64enc) }}

{{ if .Values.secrets.AUTH_TOKEN_PRIVATE_KEY }}
  {{- $AUTH_TOKEN_PRIVATE_KEY = $AUTH_TOKEN_PRIVATE_KEY | b64enc }}
{{ else }}
  {{- $AUTH_TOKEN_PRIVATE_KEY = get $SECRET "AUTH_TOKEN_PRIVATE_KEY" | default ($AUTH_TOKEN_PRIVATE_KEY | b64enc) }}
{{ end }}

{{ if .Values.secrets.AUTH_TOKEN_PUBLIC_KEY }}
  {{- $AUTH_TOKEN_PUBLIC_KEY = $AUTH_TOKEN_PUBLIC_KEY | b64enc }}
{{ else }}
  {{- $AUTH_TOKEN_PUBLIC_KEY = get $SECRET "AUTH_TOKEN_PUBLIC_KEY" | default ($AUTH_TOKEN_PUBLIC_KEY | b64enc) }}
{{ end }}

{{ if .Values.secrets.TEMPORAL_AUTH_PRIVATE_KEY }}
  {{- $TEMPORAL_AUTH_PRIVATE_KEY = $TEMPORAL_AUTH_PRIVATE_KEY | b64enc }}
{{ else }}
  {{- $TEMPORAL_AUTH_PRIVATE_KEY = get $SECRET "TEMPORAL_AUTH_PRIVATE_KEY" | default ($TEMPORAL_AUTH_PRIVATE_KEY | b64enc) }}
{{ end }}

{{ if .Values.secrets.TEMPORAL_AUTH_PUBLIC_KEY }}
  {{- $TEMPORAL_AUTH_PUBLIC_KEY = $TEMPORAL_AUTH_PUBLIC_KEY | b64enc }}
{{ else }}
  {{- $TEMPORAL_AUTH_PUBLIC_KEY = get $SECRET "TEMPORAL_AUTH_PUBLIC_KEY" | default ($TEMPORAL_AUTH_PUBLIC_KEY | b64enc) }}
{{ end }}

{{ if .Values.ingress.tls.secret.crt }}
  {{- $INGRESS_TLS_CRT = $INGRESS_TLS_CRT | b64enc }}
{{ else }}
  {{- $INGRESS_TLS_CRT = get $SECRET "INGRESS_TLS_CRT" | default ($INGRESS_TLS_CRT | b64enc) }}
{{ end }}

{{ if .Values.ingress.tls.secret.key }}
  {{- $INGRESS_TLS_KEY = $INGRESS_TLS_KEY | b64enc }}
{{ else }}
  {{- $INGRESS_TLS_KEY = get $SECRET "INGRESS_TLS_KEY" | default ($INGRESS_TLS_KEY | b64enc) }}
{{ end }}

{{ if .Values.secrets.POSTGRES_PASSWORD }}
  {{- $POSTGRES_PASSWORD = $POSTGRES_PASSWORD | b64enc }}
{{ else }}
  {{- $POSTGRES_PASSWORD = get $SECRET "POSTGRES_PASSWORD" | default ($POSTGRES_PASSWORD | b64enc) }}
{{ end }}

{{ if .Values.infra.postgres.tls.secret.ca }}
  {{- $POSTGRES_TLS_CA = $POSTGRES_TLS_CA | b64enc }}
{{ else }}
  {{- $POSTGRES_TLS_CA = get $SECRET "POSTGRES_TLS_CA" | default ($POSTGRES_TLS_CA | b64enc) }}
{{ end }}

{{- $POSTGRES_ARGS := "" }}
{{ if and .Values.infra.postgres.tls.enabled (or .Values.infra.postgres.tls.secret.ref .Values.infra.postgres.tls.secret.ca) }}
  {{- $POSTGRES_ARGS = "?sslmode=verify-full&sslrootcert=/certs/postgres-ca.crt" }}
{{ else if .Values.infra.postgres.tls.enabled }}
  {{- $POSTGRES_ARGS = "?sslmode=verify-full" }}
{{ end }}

{{- if not .Values.secrets.ref }}
---
apiVersion: v1
kind: Secret
metadata:
  name: datalens-secrets
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/resource-policy: keep
type: Opaque
data:
  AUTH_TOKEN_PRIVATE_KEY: {{ $AUTH_TOKEN_PRIVATE_KEY }}
  AUTH_TOKEN_PUBLIC_KEY: {{ $AUTH_TOKEN_PUBLIC_KEY }}

  TEMPORAL_AUTH_PRIVATE_KEY: {{ $TEMPORAL_AUTH_PRIVATE_KEY }}
  TEMPORAL_AUTH_PUBLIC_KEY: {{ $TEMPORAL_AUTH_PUBLIC_KEY }}

  AUTH_MASTER_TOKEN: {{ $AUTH_MASTER_TOKEN }}
  US_MASTER_TOKEN: {{ $US_MASTER_TOKEN }}
  EXPORT_DATA_VERIFICATION_KEY: {{ $EXPORT_DATA_VERIFICATION_KEY }}
  CONTROL_API_CRYPTO_KEY: {{ $CONTROL_API_CRYPTO_KEY }}

  AUTH_ADMIN_PASSWORD: {{ $AUTH_ADMIN_PASSWORD }}

  INGRESS_TLS_CRT: {{ $INGRESS_TLS_CRT }}
  INGRESS_TLS_KEY: {{ $INGRESS_TLS_KEY }}

  POSTGRES_PASSWORD: {{ $POSTGRES_PASSWORD }}

  POSTGRES_TLS_CA: {{ $POSTGRES_TLS_CA }}

  POSTGRES_DSN_LIST_COMPENG: {{ printf "postgres://%s:%s@%s:%s/%s%s" .Values.postgres.POSTGRES_USER ($POSTGRES_PASSWORD | b64dec) .Values.postgres.POSTGRES_HOST .Values.postgres.POSTGRES_PORT .Values.postgres.POSTGRES_DB_COMPENG $POSTGRES_ARGS | b64enc}}
  POSTGRES_DSN_LIST_US: {{ printf "postgres://%s:%s@%s:%s/%s%s" .Values.postgres.POSTGRES_USER ($POSTGRES_PASSWORD | b64dec) .Values.postgres.POSTGRES_HOST .Values.postgres.POSTGRES_PORT .Values.postgres.POSTGRES_DB_US $POSTGRES_ARGS | b64enc}}
  POSTGRES_DSN_LIST_AUTH: {{ printf "postgres://%s:%s@%s:%s/%s%s" .Values.postgres.POSTGRES_USER ($POSTGRES_PASSWORD | b64dec) .Values.postgres.POSTGRES_HOST .Values.postgres.POSTGRES_PORT .Values.postgres.POSTGRES_DB_AUTH $POSTGRES_ARGS | b64enc}}
  POSTGRES_DSN_LIST_META_MANAGER: {{ printf "postgres://%s:%s@%s:%s/%s%s" .Values.postgres.POSTGRES_USER ($POSTGRES_PASSWORD | b64dec) .Values.postgres.POSTGRES_HOST .Values.postgres.POSTGRES_PORT .Values.postgres.POSTGRES_DB_META_MANAGER $POSTGRES_ARGS | b64enc}}
{{- end }}
{{- if and .Values.ingress.tls.enabled $INGRESS_TLS_CRT $INGRESS_TLS_KEY (not .Values.ingress.tls.secret.ref) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: ingress-tls-secret
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/resource-policy: keep
type: kubernetes.io/tls
data:
  tls.crt: {{ $INGRESS_TLS_CRT }}
  tls.key: {{ $INGRESS_TLS_KEY }}
{{- end }}
{{- if and .Values.infra.postgres.tls.enabled $POSTGRES_TLS_CA (not .Values.infra.postgres.tls.secret.ref) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-tls-secret
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/resource-policy: keep
type: Opaque
data:
  ca.crt: {{ $POSTGRES_TLS_CA }}
{{- end }}
