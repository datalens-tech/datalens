services:
  pg-compeng:
    container_name: datalens-pg-compeng
    image: postgres:16-alpine
    environment:
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres

  control-api:
    container_name: datalens-control-api
    image: ghcr.io/datalens-tech/datalens-control-api:0.2202.2
    environment:
      BI_API_UWSGI_WORKERS_COUNT: 4
      CONNECTOR_AVAILABILITY_VISIBLE: "clickhouse,postgres,chyt,ydb,mysql,greenplum,mssql,appmetrica_api,metrika_api"
      RQE_FORCE_OFF: 1
      DL_CRY_ACTUAL_KEY_ID: key_1
      DL_CRY_KEY_VAL_ID_key_1: "h1ZpilcYLYRdWp7Nk8X1M1kBPiUi8rdjz9oBfHyUKIk="
      RQE_SECRET_KEY: ""
      US_HOST: "http://us:8083"
      US_MASTER_TOKEN: "fake-us-master-token"
      AUTH__TYPE: "NATIVE"
      AUTH__JWT_ALGORITHM: "PS256"
      AUTH__JWT_KEY: ${AUTH_TOKEN_PUBLIC_KEY:?missed AUTH_TOKEN_PUBLIC_KEY env}
    ports:
      - 8081:8080
    depends_on:
      - us

  data-api:
    container_name: datalens-data-api
    image: ghcr.io/datalens-tech/datalens-data-api:0.2202.2
    environment:
      GUNICORN_WORKERS_COUNT: 5
      RQE_FORCE_OFF: 1
      CACHES_ON: 0
      MUTATIONS_CACHES_ON: 0
      RQE_SECRET_KEY: ""
      DL_CRY_ACTUAL_KEY_ID: key_1
      DL_CRY_KEY_VAL_ID_key_1: "h1ZpilcYLYRdWp7Nk8X1M1kBPiUi8rdjz9oBfHyUKIk="
      BI_COMPENG_PG_ON: 1
      BI_COMPENG_PG_URL: "postgresql://postgres:postgres@pg-compeng:5432/postgres"
      US_HOST: "http://us:8083"
      US_MASTER_TOKEN: "fake-us-master-token"
      AUTH__TYPE: "NATIVE"
      AUTH__JWT_ALGORITHM: "PS256"
      AUTH__JWT_KEY: ${AUTH_TOKEN_PUBLIC_KEY:?missed AUTH_TOKEN_PUBLIC_KEY env}
    ports:
      - 8082:8080
    depends_on:
      - us
      - pg-compeng

  pg-demo-connection:
    container_name: datalens-pg-demo-connection
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: demo
      POSTGRES_USER: demo
      POSTGRES_PASSWORD: demo
    volumes:
      - db-demo:/var/lib/postgresql/data
      - ./pg-demo-connection/init:/docker-entrypoint-initdb.d

  pg-us:
    container_name: datalens-pg-us
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: us-db-ci_purgeable
      POSTGRES_USER: us
      POSTGRES_PASSWORD: us
    volumes:
      - db-us:/var/lib/postgresql/data
    ports:
      - "8086:5432"

  us:
    container_name: datalens-us
    image: ghcr.io/datalens-tech/datalens-us:0.311.0
    restart: always
    depends_on:
      - pg-us
    environment:
      APP_INSTALLATION: "opensource"
      APP_ENV: "prod"
      MASTER_TOKEN: "fake-us-master-token"
      POSTGRES_DSN_LIST: ${METADATA_POSTGRES_DSN_LIST:-postgres://us:us@pg-us:5432/us-db-ci_purgeable}
      SKIP_INSTALL_DB_EXTENSIONS: ${METADATA_SKIP_INSTALL_DB_EXTENSIONS:-0}
      USE_DEMO_DATA: ${USE_DEMO_DATA:-1}
      HC: ${HC:-0}
      NODE_EXTRA_CA_CERTS: /certs/root.crt
      AUTH_ENABLED: "true"
      AUTH_TOKEN_PUBLIC_KEY: ${AUTH_TOKEN_PUBLIC_KEY:?missed AUTH_TOKEN_PUBLIC_KEY env}
    ports:
      - "8083:8083"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./certs:/certs


  pg-auth:
    container_name: datalens-pg-auth
    image: postgres:16
    environment:
      POSTGRES_DB: auth-db-ci_purgeable
      POSTGRES_USER: auth
      POSTGRES_PASSWORD: auth
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=en_US.utf8 --lc-ctype=en_US.utf8'
    volumes:
      - db-auth:/var/lib/postgresql/data
    ports:
      - "8089:5432"

  auth:
    container_name: datalens-auth
    image: ghcr.io/datalens-tech/datalens-auth:0.4.0
    restart: always
    depends_on:
      - pg-auth
    environment:
      APP_INSTALLATION: "opensource"
      APP_ENV: "prod"
      MASTER_TOKEN: "fake-auth-master-token"
      POSTGRES_DSN_LIST: ${AUTH_METADATA_POSTGRES_DSN_LIST:-postgres://auth:auth@pg-auth:5432/auth-db-ci_purgeable}
      SKIP_INSTALL_DB_EXTENSIONS: ${AUTH_METADATA_SKIP_INSTALL_DB_EXTENSIONS:-0}
      NODE_EXTRA_CA_CERTS: /certs/root.crt
      UI_APP_ENDPOINT: "http://localhost:8080"
      TOKEN_PRIVATE_KEY: ${AUTH_TOKEN_PRIVATE_KEY:?missed AUTH_TOKEN_PRIVATE_KEY env}
      TOKEN_PUBLIC_KEY: ${AUTH_TOKEN_PUBLIC_KEY:?missed AUTH_TOKEN_PUBLIC_KEY env}
      AUTH_ADMIN_PASSWORD: ${AUTH_ADMIN_PASSWORD:-Password1!}
    ports:
      - "8088:8088"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./certs:/certs

  datalens:
    container_name: datalens-ui
    image: ghcr.io/datalens-tech/datalens-ui:0.2624.0
    ports:
      - ${UI_PORT:-8080}:8080
    depends_on:
      - auth
      - us
      - control-api
      - data-api
      - pg-demo-connection
    environment:
      APP_MODE: "full"
      APP_ENV: "production"
      APP_INSTALLATION: "opensource"
      AUTH_POLICY: "disabled"
      US_ENDPOINT: "http://us:8083"
      BI_API_ENDPOINT: "http://control-api:8080"
      BI_DATA_ENDPOINT: "http://data-api:8080"
      US_MASTER_TOKEN: "fake-us-master-token"
      NODE_EXTRA_CA_CERTS: "/usr/local/share/ca-certificates/cert.pem"
      HC: ${HC:-0}
      YANDEX_MAP_ENABLED: ${YANDEX_MAP_ENABLED:-0}
      YANDEX_MAP_TOKEN: ${YANDEX_MAP_TOKEN}
      AUTH_ENABLED: "true"
      AUTH_ENDPOINT: "http://auth:8088"
      AUTH_TOKEN_PUBLIC_KEY: ${AUTH_TOKEN_PUBLIC_KEY:?missed AUTH_TOKEN_PUBLIC_KEY env}
volumes:
  db-auth:
  db-us:
  db-demo: